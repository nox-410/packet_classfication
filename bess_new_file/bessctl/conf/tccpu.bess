import scapy.all as scapy

# Craft a packet with the specified IP addresses
def gen_packet(proto, src_ip, dst_ip):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = proto(sport=10001, dport=10002)
    payload = 'helloworld'
    pkt = eth/ip/udp/payload
    return bytes(pkt)

packets = [gen_packet(scapy.UDP, '172.16.100.1', '10.0.0.1'),
           gen_packet(scapy.UDP, '172.12.55.99', '12.34.56.78'),
           gen_packet(scapy.UDP, '172.12.55.99', '10.0.0.1'),
           gen_packet(scapy.UDP, '172.16.100.1', '12.34.56.78'),
           gen_packet(scapy.TCP, '172.12.55.99', '12.34.56.78'),
           gen_packet(scapy.UDP, '192.168.1.123', '12.34.56.78'),
          ]
'''
def get_rule_from_line(line):
    L = list(line[1:].split())
    sip = L[0]
    dip = L[1]
    sport_b, sport_e = int(L[2]), int(L[4])
    dport_b, dport_e = int(L[5]), int(L[7])
    prot , protmask = map(eval,L[8].split('/'))
    prot_b = prot & protmask
    prot_e = prot_b + (0xff ^ protmask)
    return {'src_ip': sip,
            'dst_ip': dip,
            'drop': False,
            'src_port_b': sport_b,
            'src_port_e': sport_e,
            'dst_port_b': dport_b,
            'dst_port_e': dport_e,
            'prot_b': prot_b,
            'prot_e': prot_e}


def get_rule_from_file(path):
    f = open(path)
    rule_array = []
    while True:
        line = f.readline()
        if not line:
            break
        rule = get_rule_from_line(line)
        rule_array.append(rule)
    f.close()
    return rule_array



rule_number = 1024

fw::PC_ACL(rules=get_rule_from_file("../../data/rule_{0}.rule".format(rule_number)))
'''
fw::TCCPU_ACL()
Source() -> Rewrite(templates=packets) -> fw -> Sink()
